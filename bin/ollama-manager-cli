#!/usr/bin/env perl

use strict;
use warnings;
use v5.32.0;

use FindBin ();
use lib "$FindBin::Bin/../lib"; # Find Ollama::Manager relative to script

use Getopt::Long qw( GetOptions );
use Pod::Usage qw( pod2usage );
use Try::Tiny qw( catch try );
use Ollama::Manager ();

Getopt::Long::Configure('pass_through'); # Stop option processing at the first non-option

my %opts;
my @cli_args = @ARGV;

# --- Parse Global Options --- 
# Use GetOptions directly on the argument array
my $ok = GetOptions(
    \%opts,             # Hash to store results
    'ollama-path=s',    # --ollama-path PATH
    'help|h|?',         # -h, -?, --help
    'man',              # --man
);

# Exit if option parsing failed
if (!$ok) {
    pod2usage(-exitval => 2);
}

# Handle help options immediately
pod2usage(-exitval => 0, -verbose => 1) if $opts{help};
pod2usage(-exitval => 0, -verbose => 2) if $opts{man};

# The command should be the first remaining argument in @cli_args
my $command = shift @cli_args || '';

# --- Instantiate Manager --- 
my $manager = try {
    Ollama::Manager->new(
        ollama_path => $opts{'ollama-path'}, # Pass the parsed option
    );
} catch {
    chomp;
    die "Failed to initialize Ollama::Manager: $_\n";
};

# --- Parse Command-Specific Options & Dispatch ---
my $output = ''; # Declare output variable here

try {
    if ( ! $command ) {
        pod2usage(-message => "Error: No command specified.", -exitval => 2);
    }
    elsif ( $command eq 'list' ) {
        # No specific opts for list currently
        $output = $manager->list();
    }
    elsif ( $command eq 'ps' ) {
        # No specific opts for ps currently
        $output = $manager->ps();
    }
    elsif ( $command eq 'version' ) {
        my $version = $manager->version();
        $output = "Ollama version: $version\n";
    }
    elsif ( $command eq 'is-installed' ) {
        $output = $manager->is_installed ? "Ollama is installed.\n" : "Ollama is NOT installed.\n";
    }
    elsif ( $command eq 'start-server' ) {
        $manager->start();
        $output = "Ollama server start requested.\n";
    }
    elsif ( $command eq 'stop-server' ) {
        $manager->stop();
        $output = "Ollama server stop requested.\n";
    }
    elsif ( $command eq 'pull' ) {
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for pull command.", -exitval => 2, -verbose => 0);
        $output = $manager->pull(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'push' ) {
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for push command.", -exitval => 2, -verbose => 0);
        $output = $manager->push(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'show' ) {
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for show command.", -exitval => 2, -verbose => 0);
        $output = $manager->show(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'run' ) { # Map 'run' command to run_model method
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for run command.", -exitval => 2, -verbose => 0);
        $output = $manager->run_model(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'stop' ) { # Map 'stop' command to stop_model method
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for stop command.", -exitval => 2, -verbose => 0);
        $output = $manager->stop_model(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'create' ) {
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing modelfile path/name for create command.", -exitval => 2, -verbose => 0);
        $output = $manager->create(modelfile => $model_name, extra_args => [@cli_args]); # Assuming first arg is modelfile path
    }
    elsif ( $command eq 'cp' ) {
        my $src = shift @cli_args or pod2usage(-message => "Error: Missing source model for cp command.", -exitval => 2, -verbose => 0);
        my $dest = shift @cli_args or pod2usage(-message => "Error: Missing destination model for cp command.", -exitval => 2, -verbose => 0);
        $output = $manager->cp(src => $src, dest => $dest, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'rm' ) {
        my $model_name = shift @cli_args or pod2usage(-message => "Error: Missing model name for rm command.", -exitval => 2, -verbose => 0);
        $output = $manager->rm(model => $model_name, extra_args => [@cli_args]);
    }
    elsif ( $command eq 'help' ) {
         # Pass remaining args to the help command (e.g., help pull)
        $output = $manager->help(command => shift @cli_args, extra_args => [@cli_args]);
    }
    else {
        pod2usage(-message => "Error: Unknown command '$command'.", -exitval => 2);
    }
}
catch {
    chomp;
    die "Error executing command '$command': $_\n";
};

# --- Output Result ---
print $output;

exit 0;

__END__

=head1 NAME

ollama-manager-cli - Command-line interface for Ollama::Manager

=head1 SYNOPSIS

ollama-manager-cli [global options] <command> [command arguments...]

 Global Options:
   --ollama-path PATH  Specify the path to the ollama binary
   --help, -h, -?      Show brief help message
   --man               Show full documentation

 Commands:
   list                List locally available models
   ps                  List running models
   version             Show the installed Ollama version
   is-installed        Check if Ollama executable is found
   start-server        Start the Ollama background server
   stop-server         Stop the Ollama background server
   pull MODEL [args..] Pull a model
   push MODEL [args..] Push a model
   show MODEL [args..] Show model details
   run MODEL [args..]  Run a model
   stop MODEL [args..] Stop a running model
   create MODELFILE [args..] Create a model from a Modelfile
   cp SRC DEST [args..] Copy a model
   rm MODEL [args..]   Remove a model
   help [COMMAND]      Show help for ollama CLI, optionally for a specific command

=head1 DESCRIPTION

This script provides a command-line interface to the functionality
offered by the Ollama::Manager Perl module, wrapping the underlying
`ollama` executable commands.

=head1 COMMANDS

=over 4

=item list

Lists models that are available locally.

=item ps

Lists models that are currently running or being served.

=item version

Prints the version of the installed Ollama application.

=item is-installed

Checks if the Ollama executable can be found (either in PATH or via --ollama-path).

=item start-server

Attempts to start the Ollama server process in the background.

=item stop-server

Attempts to stop the Ollama server process.

=item pull MODEL [args...]

Pulls the specified MODEL from the registry. Additional arguments are passed to the `ollama pull` command.

=item push MODEL [args...]

Pushes the specified MODEL to the registry. Additional arguments are passed to the `ollama push` command.

=item show MODEL [args...]

Shows details for the specified MODEL. Additional arguments are passed to the `ollama show` command.

=item run MODEL [args...]

Runs the specified MODEL. Additional arguments are passed to the `ollama run` command.

=item stop MODEL [args...]

Stops the specified running MODEL. Additional arguments are passed to the `ollama stop` command.

=item create MODELFILE [args...]

Creates a model using the specified MODELFILE path. Additional arguments are passed to the `ollama create` command.

=item cp SRC DEST [args...]

Copies model SRC to DEST. Additional arguments are passed to the `ollama cp` command.

=item rm MODEL [args...]

Removes the specified MODEL. Additional arguments are passed to the `ollama rm` command.

=item help [COMMAND]

Displays help information from the underlying `ollama` executable. If COMMAND is specified, shows help for that specific command.

=back

=cut
