#!/usr/bin/env perl

use strict;
use warnings;
use 5.032000;

use FindBin ();
use lib "$FindBin::Bin/../lib";    # Find Ollama::Manager relative to script

use Carp         qw( croak );
use Getopt::Long qw( GetOptions );
use Pod::Usage   qw( pod2usage );
use Try::Tiny    qw( catch try );
use English      qw( -no_match_vars );

use Ollama::Manager          ();
use Ollama::Service::Launchd ();    # macOS
use Ollama::Service::Systemd ();    # Linux

Getopt::Long::Configure('pass_through');    # Stop option processing at the first non-option

sub build_service_adapter {
    my ($opts) = @_;
    my $choice = $opts->{service} // 'auto';

    if ( $choice eq 'none' ) {
        return;
    }

    if ( $choice eq 'launchd' || ( $choice eq 'auto' && $OSNAME eq 'darwin' ) ) {
        my $scope = $opts->{'launchd-scope'} // 'gui';
        my $label = $opts->{'launchd-label'} // 'com.ollama.ollama';
        return Ollama::Service::Launchd->new( scope => $scope, label => $label );
    }

    if ( $choice eq 'systemd' || ( $choice eq 'auto' && $OSNAME ne 'darwin' ) ) {
        my $scope = $opts->{'systemd-scope'} // 'user';
        my $unit  = $opts->{'systemd-unit'}  // 'ollama';
        return Ollama::Service::Systemd->new( scope => $scope, unit => $unit );
    }

    return;
}

sub main {
    my %opts;

    my $ok = GetOptions(
        \%opts,
        'ollama-path=s',      # --ollama-path PATH
        'no-http-health!',    # --no-http-health (disable HTTP health checks)
        'service=s',          # --service auto|launchd|systemd|none
        'systemd-scope=s',    # --systemd-scope user|system
        'launchd-scope=s',    # --launchd-scope gui|system
        'systemd-unit=s',     # --systemd-unit UNIT
        'launchd-label=s',    # --launchd-label LABEL
        'help|h|?',           # -h, -?, --help
        'man',                # --man
    );

    if ( !$ok ) {
        pod2usage( -exitval => 2 );
    }

    if ( $opts{'no-http-health'} ) {
        $ENV{OLLAMA_MANAGER_DISABLE_HTTP} = 1;
    }

    if ( $opts{help} ) {
        pod2usage( -exitval => 0, -verbose => 1 );
    }
    elsif ( $opts{man} ) {
        pod2usage( -exitval => 0, -verbose => 2 );
    }

    # After GetOptions, @ARGV contains the command and its args
    my @cli_args = @ARGV;
    my $command  = shift @cli_args || q{};

    my $manager = try {
        Ollama::Manager->new( ollama_path => $opts{'ollama-path'}, );
    }
    catch {
        chomp;
        die "Failed to initialize Ollama::Manager: $_\n";
    };

    my $service = build_service_adapter( \%opts );

    my $output = q{};

    my %dispatch = (
        list   => sub { $output = $manager->list() },
        ps     => sub { $output = $manager->ps() },
        status => sub {
            my $status = $manager->status();
            if ( $status ne 'RUNNING' && $service ) {
                $status = $service->status($manager);
            }
            $output = $status . "\n";
        },
        pid => sub {
            my $pid = $manager->pid();
            if ( !defined $pid && $service ) {
                $pid = $service->pid($manager);
            }
            $output = defined $pid ? "$pid\n" : "\n";
        },
        version => sub {
            my $version = $manager->version();
            $output = "Ollama version: $version\n";
        },
        'is-installed' => sub {
            $output = $manager->is_installed ? "Ollama is installed.\n" : "Ollama is NOT installed.\n";
        },
        'start-server' => sub {
            if   ($service) { $service->start($manager) }
            else            { $manager->start() }
            $output = "Ollama server start requested.\n";
        },
        'stop-server' => sub {
            if   ($service) { $service->stop($manager) }
            else            { $manager->stop() }
            $output = "Ollama server stop requested.\n";
        },
        pull => sub {
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for pull command.', -exitval => 2, -verbose => 0 );
            $output = $manager->pull( model => $model_name, extra_args => [@cli_args] );
        },
        push => sub {
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for push command.', -exitval => 2, -verbose => 0 );
            $output = $manager->push( model => $model_name, extra_args => [@cli_args] );
        },
        show => sub {
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for show command.', -exitval => 2, -verbose => 0 );
            $output = $manager->show( model => $model_name, extra_args => [@cli_args] );
        },
        run => sub {    # Map 'run' command to run_model method
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for run command.', -exitval => 2, -verbose => 0 );
            $output = $manager->run_model( model => $model_name, extra_args => [@cli_args] );
        },
        stop => sub {    # Map 'stop' command to stop_model method
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for stop command.', -exitval => 2, -verbose => 0 );
            $output = $manager->stop_model( model => $model_name, extra_args => [@cli_args] );
        },
        create => sub {
            my $model_name = shift @cli_args
                or pod2usage(
                -message => 'Error: Missing modelfile path/name for create command.',
                -exitval => 2,
                -verbose => 0
                );
            $output = $manager->create( modelfile => $model_name, extra_args => [@cli_args] );
        },
        cp => sub {
            my $src = shift @cli_args
                or pod2usage( -message => 'Error: Missing source model for cp command.', -exitval => 2, -verbose => 0 );
            my $dest = shift @cli_args
                or pod2usage( -message => 'Error: Missing destination model for cp command.', -exitval => 2, -verbose => 0 );
            $output = $manager->cp( src => $src, dest => $dest, extra_args => [@cli_args] );
        },
        rm => sub {
            my $model_name = shift @cli_args
                or pod2usage( -message => 'Error: Missing model name for rm command.', -exitval => 2, -verbose => 0 );
            $output = $manager->rm( model => $model_name, extra_args => [@cli_args] );
        },
        help => sub {
            $output = $manager->help( command => shift @cli_args, extra_args => [@cli_args] );
        },
    );

    try {
        if ( !$command || !exists $dispatch{$command} ) {
            pod2usage( -message => "Error: Unknown or missing command '$command'.", -exitval => 2 );
        }
        $dispatch{$command}->();
    }
    catch {
        chomp;
        die "Error executing command '$command': $_\n";
    };

    print $output or croak 'Failed to print output';
    return 0;
}

exit main();

__END__

=head1 NAME

ollama-manager-cli - Command-line interface for Ollama::Manager

=head1 SYNOPSIS

ollama-manager-cli [global options] <command> [command arguments...]

 Global Options:
   --ollama-path PATH    Specify the path to the ollama binary
   --no-http-health      Disable HTTP health checks in status detection
   --service NAME        Choose service adapter: auto (default), launchd, systemd, none
   --systemd-scope S     systemd scope: user (default) or system
   --systemd-unit U      systemd unit name (default: ollama)
   --launchd-scope S     launchd scope: gui (default) or system
   --launchd-label L     launchd label (default: com.ollama.ollama)
   --help, -h, -?        Show brief help message
   --man                 Show full documentation

 Commands:
   list                 List locally available models
   ps                   List running models
   status               Show server status (RUNNING/STOPPED)
   pid                  Print server PID (empty if not found)
   version              Show the installed Ollama version
   is-installed         Check if Ollama executable is found
   start-server         Start the Ollama background server (via service if available)
   stop-server          Stop the Ollama background server (via service if available)
   pull MODEL [args..]  Pull a model
   push MODEL [args..]  Push a model
   show MODEL [args..]  Show model details
   run MODEL [args..]   Run a model
   stop MODEL [args..]  Stop a running model
   create MODELFILE [args..] Create a model from a Modelfile
   cp SRC DEST [args..] Copy a model
   rm MODEL [args..]    Remove a model
   help [COMMAND]       Show help for ollama CLI, optionally for a specific command

=head1 DESCRIPTION

This script provides a command-line interface to Ollama::Manager with optional
service-manager integration (launchd/systemd) for start/stop/status/pid.

=cut
